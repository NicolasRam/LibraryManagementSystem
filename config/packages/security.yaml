security:
    encoders:
        App\Entity\user: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
#        in_memory: { memory: ~ }
        backend_user_provider:
            entity:
                class: App\Entity\User
                property: email
        frontend_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        backend:
            anonymous: ~
            pattern: ^/
            provider: backend_user_provider
            form_login:
                login_path: backend_user_login
                check_path: backend_user_login
                default_target_path: backend_home
                username_parameter: backend_user_login[email]
                password_parameter: backend_user_login[password]
            logout:
                path: backend_user_logout
                target: backend_user_login
        frontend:
#            pattern: ^/frontend/login
            pattern: ^/api/login_check
            stateless: true
            anonymous: true
#            provider: frontend_user_provider
#            form_login:
#                login_path: frontend_user_login
#                check_path: frontend_user_login
#                username_parameter: app_login[email]
#                password_parameter: app_login[password]
#            logout:
#                path: /logout
#                target: /
            provider: frontend_user_provider
            json_login:
#                check_path: /frontend/login_check
                check_path: /api/login_check
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: [ROLE_LIBRARIAN] }
        - { path: ^/, roles: [ROLE_ADMIN] }
        - { path: ^/, roles: [ROLE_SUPER_ADMIN] }
        - { path: ^/, roles: [ROLE_LIBRARIAN, ROLE_ADMIN, ROLE_SUPER_ADMIN] }
        - { path: ^/, role: ROLE_LIBERIAN }
        - { path: ^/, role: ROLE_ADMIN }
#        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/admin/, role: ROLE_ADMIN }
#        - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/, role: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/api/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/cards$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/cards/generate, roles: ROLE_USER }
        - { path: ^/api/books$, roles: IS_AUTHENTICATED_ANONYMOUSLY }


    #    access_decision_manager:
#            strategy: unanimous
#            allow_if_all_abstain: false

    role_hierarchy:
#        ROLE_LIBRARIAN: ROLE_MEMBER
        ROLE_ADMIN: ROLE_LIBRARIAN
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
